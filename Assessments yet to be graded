/* ******** Updated 10/5/19 ***********
The report gives a report on assignments that have not been graded within the expected days.  
The parameter expected_days allows you to enter in how many days are acceptable to allow for grading after due date or late submission date - the default is 14. Assignments are only counted if there are student submissions for it (it does not work with assignments for which teachers just enter a grade)

The report also reports on final grades which have an interim grade (between but not including 0 and 0.2; that is: IP,PXT,YTC,XTN,SUP).

Enter in a category id to limit your search to all the courses in the category, and in any categories under this category (=subcategory).  The category id number is given in the address bar when you browse to a category.    */

with courseStudents as
(
select cc.id as category, cc.name as catname, c.id as course, u.id as student, u.email, u.firstname, u.lastname, c.shortname as coursename, c.fullname
FROM {course_categories} AS cc
JOIN {course} AS c ON cc.id = c.category
JOIN {context} AS ctx ON c.id = ctx.instanceid
JOIN {role_assignments} AS ra ON ra.contextid = ctx.id and ra.roleid = 5 --student, this info is stored in table role
JOIN {user} AS u ON u.id = ra.userid
where cc.path like '%/' || :category || '%'
)

, studentInGroups as
(
select cc.id as category, c.id as course, cmod.module, cmod.instance,  cmod.completionexpected, gg.id as groupingID,  gg.name || ' ' || g.name::text as groupname, gm.userid as student
FROM {course_categories} AS cc 
JOIN {course} AS c ON cc.id = c.category
join {groupings} as gg on gg.courseid = c.id 
join {course_modules} as cmod on cmod.course = c.id and cmod.groupingid = gg.id  
        -- in cmod, groupmode = 1 =>separate groups, also when there is a groupingid => separate groups. cmod.module =12 for quiz
join {groups} as g on g.courseid = c.id 
join {groupings_groups} as ggg on ggg.groupingid = gg.id and ggg.groupid = g.id 
join {groups_members} as gm on gm.groupid = g.id
)

, studentInNoGroups as
(
select s.category, s.course, cmod.module, cmod.instance,  cmod.completionexpected, 0 as groupingID,  'No group'::text as groupname, s.student
from {course} AS c
join {course_modules} as cmod on cmod.course = c.id and cmod.groupingid = 0
join courseStudents  as s on c.id = s.course
)

, studentMods as
(
select sm.* 
from 
  (select * from studentInNoGroups  
  union all select * from studentInGroups ) sm
)

, modsInfo as
(
select s.* , gs.finalgrade, 
gs.timemodified AS GradeUpdated,
coalesce(auo.duedate, auf.extensionduedate, 0) AS ExtensionDateDue
--use the override due date if there is one, if not then use the extension due date if there is one or use 0
from studentMods as s
left JOIN {grade_items} AS gi ON gi.courseid = s.course and gi.iteminstance = s.instance 
left JOIN {grade_grades} AS gs ON gi.id = gs.itemid and gs.userid = s.student
left JOIN {assign_user_flags} AS auf ON auf.assignment = s.instance and auf.userid = s.student and auf.extensionduedate > 0 --only include if an extension is set
left JOIN {assign_overrides} AS auo ON auo.assignid = s.instance and auo.userid = s.student and auo.duedate > 0 --only include if an extension is set)
where gi.gradetype <> 3 --only include when grade type is not 'none' - ie. the assignment is expected to be graded
)

, studentAssignments as
(
select s.* , 
'%%WWWROOT%%/mod/assign/view.php%%Q%%id=' ||  cmod.id || '&action=grading' as activity_link,
a.name,
a.duedate,
coalesce(asub.timemodified, 0) AS SubmissionModified,
coalesce( ROUND(s.finalgrade,2), ROUND(ag.grade,2) , 0 ) AS Grade    --Final grade in gradebook, or in module grades or empty.

from modsInfo as s
join {modules} as mod on s.module = mod.id and mod.name = 'assign'
JOIN {assign} AS a ON a.course = s.course and a.id=s.instance 
join {course_modules} cmod on cmod.instance = a.id and cmod.module = mod.id --and cmod.visible = 1 
left JOIN {assign_grades} AS ag ON ag.assignment = s.instance and ag.userid = s.student
/* ** Only want assignments where there have been submissions, so join rather than left join here */
JOIN {assign_submission} AS asub ON asub.assignment = s.instance and asub.userid = s.student and asub.latest=1 and asub.status = 'submitted'
)

, firstjoin as
(
select
sa.category, sa.course, sa.activity_link,
sa.name ||  case when sa.duedate > 0 then ' due ' ||  TO_CHAR(TO_TIMESTAMP(sa.duedate), 'DD/MM/YYYY') else '' end as name,
sa.student, 
case when (sa.SubmissionModified > 0) then
     round( ( EXTRACT(EPOCH FROM now())  - greatest(sa.duedate, sa.ExtensionDateDue, sa.SubmissionModified) )/86400) --86400 seconds in a day
else 0 end
as daysFromDue, 
 sa.SubmissionModified,
sa.Grade,  -- was ::text but we don't need this because we don't have the forum info in it anymore
--sa.GradeUpdated,
greatest(sa.duedate, sa.ExtensionDateDue) as DateDue

from studentAssignments sa
)

, finalCourseGrades as
(
select cs.category, cs.course
, '%%WWWROOT%%/grade/report/user/index.php%%Q%%id=' ||  cs.course || '&userid=' || cs.student as activity_link
,'Course Total'::text as name
, cs.student
, case when ( coalesce(gg.timemodified, 0) > 0) then 
     round( ( EXTRACT(EPOCH FROM now())  -  coalesce(gg.timemodified, 0) )/86400) --86400 seconds in a day
     else 0 end as daysFromDue
, coalesce(gg.timemodified, 0) as SubmissionModified
, ROUND(gg.finalgrade,2) AS Grade 
, 0 as DateDue

FROM courseStudents as cs
left JOIN {grade_items} AS gi ON gi.courseid = cs.course and gi.itemtype = 'course'
left JOIN {grade_grades} AS gg ON gi.id = gg.itemid and gg.userid = cs.student
)

, secondjoin as
(select * from firstjoin where Grade < 1 and daysFromDue > :expected_days
    union all select * from finalCourseGrades where Grade < 0.2 and Grade > 0 --so by definition an interim grade
)

select c.catname as Category_Name, c.coursename as Course_Code, c.fullname as Course_Name, name as Activity, c.email as Student_Email, c.firstname as Student_Firstname, c.lastname as Student_Lastname,
sj.daysfromdue as Grade_Overdue, 
case when DateDue = 0 then '' else  TO_CHAR(TO_TIMESTAMP(DateDue), 'DD/MM/YYYY HH24:MI') end as Student_Due_Date ,
case when sj.SubmissionModified = 0 then '' else  TO_CHAR(TO_TIMESTAMP(sj.SubmissionModified), 'DD/MM/YYYY HH24:MI') end as Submitted,
sj.grade as Grade, activity_link as Link
from secondjoin sj
join courseStudents c on c.course = sj.course and c.student = sj.student and c.category = sj.category
order by c.category, c.coursename, sj.datedue, sj.name, c.email
